[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
name = "james-code"
version = "0.0.0"
description = "James Code - A powerful code assistant with READ, WRITE, and EXECUTE tools for autonomous local environment navigation"
authors = ["James Code Team"]
readme = "README.md"
homepage = "https://github.com/your-org/james-code"
repository = "https://github.com/your-org/james-code"
documentation = "https://james-code.readthedocs.io"
keywords = ["code", "assistant", "automation", "tools", "ai", "james"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{include = "james_code", from = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
# Core dependencies (minimal for now)

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"

# Code quality
black = "^23.7.0"
ruff = "^0.0.278"
mypy = "^1.5.0"
pre-commit = "^3.3.0"

# Development tools
ipython = "^8.14.0"
jupyter = "^1.0.0"

# Version management
poetry-dynamic-versioning = "^1.0.0"

[tool.poetry.group.docs.dependencies]
# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.1.0"
mkdocs-mermaid2-plugin = "^1.1.0"

[tool.poetry.extras]
# Optional LLM integrations
llm = ["openai", "anthropic"]
# Optional MCP support  
mcp = ["mcp-client"]
# All optional features
all = ["openai", "anthropic", "mcp-client"]

[tool.poetry.scripts]
# CLI entry points
james-code = "james_code.cli:main"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/your-org/james-code/issues"
"Documentation" = "https://james-code.readthedocs.io"
"Source Code" = "https://github.com/your-org/james-code"

# Tool configurations
[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/james_code",
    "--cov-report=term-missing",
    "--cov-report=html", 
    "--cov-report=xml",
    "--benchmark-skip",  # Skip benchmarks by default
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "benchmark: marks tests as benchmark tests",
    "memory_intensive: marks tests that use significant memory",
    "real_api: marks tests that use real API calls",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Dynamic versioning configuration
[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"